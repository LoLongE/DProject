package com.polarisoffice.support.wp.account;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.rest.webmvc.BasePathAwareController;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.polarisoffice.support.wp.account.domain.User;
import com.polarisoffice.support.wp.account.domain.UserDept;

@BasePathAwareController
public class AccountController {

	protected Log logger = LogFactory.getLog( getClass() );

	private @Autowired
	AccountService accountService;

	@RequestMapping( value = "/accountByEmpno", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS} )
	public @ResponseBody AccountResponse accountByEmpno( 
		@RequestParam( "empno" ) final String empno,
		@RequestParam( "pwd" ) final String pwd ) throws Exception {
		return this.accountService.accountByEmpno( empno, pwd );
	}

	@RequestMapping( value = "/member/task/{direct_org}", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS} )
	public @ResponseBody List<UserDept> getTeamByUserSeqd( @PathVariable( "direct_org" ) final String direct_org ) throws Exception {
		return this.accountService.getUsersByTeamSeq( direct_org );
	}

	@RequestMapping( value = "/member/user/{org_cd}", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS} )
	public @ResponseBody List<User> getUsersByOrgCd( @PathVariable( "org_cd" ) final String org_cd ) throws Exception {
		return this.accountService.getUsersByOrgCode( org_cd );
	}

	@RequestMapping( value = "/member/alluser/{org_cd}", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS} )
	public @ResponseBody List<User> getAllUsersByOrgCd( @PathVariable( "org_cd" ) final String org_cd ) throws Exception {
		return this.accountService.getAllUsersByOrgCodeRecursive( org_cd );
	}

	@RequestMapping( value = "/member/searchuser/{name}", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS} )
	public @ResponseBody List<User> getSearchUserByName( @PathVariable( "name" ) final String name ) throws Exception {
		return this.accountService.getSearchUserByName( name );
	}

	@RequestMapping( value = "/member/getuser/{empno}", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS} )
	public @ResponseBody User getUserByEmpNo( @PathVariable( "empno" ) final String empno ) throws Exception {		
		return this.accountService.getUserByEmpNo( empno );
	}

	// hf		
	@RequestMapping( value = "/member/logincheck/{userId}", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS} )
	public @ResponseBody User loginCheck( @PathVariable( "userId" ) final String userId ) throws Exception {
		return this.accountService.getUserByEmpNo( userId );
	}
	
	@RequestMapping( value = "/accountbyssoid", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS} )
	public @ResponseBody AccountResponse accountBySSOID( 
		@RequestParam( "ssoId" ) final String ssoId,
		@RequestParam( "ssoPw" ) final String ssoPw,
		@RequestParam( "ssoName" ) final String ssoName ) throws Exception {
		logger.info("[AccountController] : accountBySSOID : " + ssoId +","+ ssoName);
		return this.accountService.accountBySSOID( ssoId, ssoPw, ssoName );
	}
	
	@CrossOrigin( origins = "*" )
	@RequestMapping( value = "/accoutbyssoid1", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS} )
	public @ResponseBody AccountResponse accoutbyssoid1( 
		@RequestParam( "ssoId" ) final String ssoId,
		@RequestParam( "ssoPw" ) final String ssoPw,
		@RequestParam( "ssoName" ) final String ssoName ) throws Exception {
		logger.info("[AccountController] : accountBySSOID : " + ssoId +","+ ssoName);
		return this.accountService.accountBySSOID( ssoId, ssoPw, ssoName );
	}
	
	@CrossOrigin
	@RequestMapping( value = "/accoutbyssoid2", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS} )
	public @ResponseBody AccountResponse accoutbyssoid2( 
		@RequestParam( "ssoId" ) final String ssoId,
		@RequestParam( "ssoPw" ) final String ssoPw,
		@RequestParam( "ssoName" ) final String ssoName ) throws Exception {
		logger.info("[AccountController] : accountBySSOID : " + ssoId +","+ ssoName);
		return this.accountService.accountBySSOID( ssoId, ssoPw, ssoName );
	}
	
	@RequestMapping( value = "/member/ssologin/{userId}/{userPw}/{userName}", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.OPTIONS} )
	public @ResponseBody AccountResponse ssologin( @PathVariable( "userId" ) final String userId, @PathVariable( "userPw" ) final String userPw, @PathVariable( "userName" ) final String userName ) throws Exception {
		logger.info("[AccountController] : ssologin : " + userId +","+ userName);
		return this.accountService.accountBySSOID( userId, userPw, userName );
	}

}
